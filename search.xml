<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码整洁之道 - 函数</title>
    <url>/2025/06/30/Clean-Code-Function/</url>
    <content><![CDATA[<h2 id="短小-Small"><a href="#短小-Small" class="headerlink" title="短小 Small"></a>短小 Small</h2><p>函数的第一条规则是要 <strong>短小</strong>，第二条规则是要 <strong>更短小</strong></p>
<ul>
<li>20 行封顶最佳</li>
</ul>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderPageWithSetupsAndTearDowns</span><span class="params">(PageData pageData, <span class="type">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isTestPage(pageData)) &#123;</span><br><span class="line">        includeSetupAndTeardownPages(pageData, isSuite);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pageData.getHtml();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="代码块与缩进-Blocks-and-Indenting"><a href="#代码块与缩进-Blocks-and-Indenting" class="headerlink" title="代码块与缩进 Blocks and Indenting"></a>代码块与缩进 Blocks and Indenting</h2><p>if 、else 和 while 语句等，其中的代码块应该只占一行（should be one line long），通常该行是一个函数调用</p>
<ul>
<li><p>函数的缩进层级不该多于一层或两层</p>
</li>
<li><p>这样的函数易于阅读和理解</p>
</li>
</ul>
<h2 id="只做一件事-Do-One-Thing"><a href="#只做一件事-Do-One-Thing" class="headerlink" title="只做一件事 Do One Thing"></a>只做一件事 Do One Thing</h2><ul>
<li><p>函数应该做一件事。做好这件事，只做这一件事。</p>
</li>
<li><p>函数的目的 &#x3D;&gt; 把较大的概念 拆分为 另一抽象层上的 一系列步骤</p>
</li>
<li><p>如果步骤在同一抽象层上，我们就可以认为是同一件事</p>
</li>
<li><p>判断函数可否做了一件事 -&gt; 看其是否可再被拆分出一个函数</p>
</li>
<li><p>只做一件事的函数，无法被合理切分为多个区段</p>
</li>
</ul>
<h2 id="每个函数一个抽象层级-One-Level-of-Abstraction-per-Function"><a href="#每个函数一个抽象层级-One-Level-of-Abstraction-per-Function" class="headerlink" title="每个函数一个抽象层级 One Level of Abstraction per Function"></a>每个函数一个抽象层级 One Level of Abstraction per Function</h2><ul>
<li><p>要确保函数只做一件事，函数中语句必须在同一抽象层级</p>
</li>
<li><p>The Stepdown Rule 向下规则：让代码读起来像是一系列 自顶向下的 TO 开头的段落是保持抽象层级协调一致的有效技巧</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Engineering</category>
      </categories>
      <tags>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 创建型 - 单例模式</title>
    <url>/2025/07/02/Design-Pattern-Singleton/</url>
    <content><![CDATA[<h2 id="类型-Type"><a href="#类型-Type" class="headerlink" title="类型 Type"></a>类型 Type</h2><ul>
<li>创建型   Creational</li>
</ul>
<h2 id="含义-Intent"><a href="#含义-Intent" class="headerlink" title="含义 Intent"></a>含义 Intent</h2><p>The intent of the singleton pattern is to ensure that a class only has one instance, and to provide a global point of access to it.</p>
<span id="more"></span>

<h2 id="例子-Real-Example"><a href="#例子-Real-Example" class="headerlink" title="例子 Real Example"></a>例子 Real Example</h2><p>Logger，通常来说应用中只会有一个，以避免意想不到的结果。</p>
<h2 id="代码-Code"><a href="#代码-Code" class="headerlink" title="代码 Code"></a>代码 Code</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;Logger&gt; lazyLogger = <span class="keyword">new</span> Lazy&lt;Logger&gt;(() =&gt; <span class="keyword">new</span> Logger());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger Instance =&gt; lazyLogger.Value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Logger</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">// SingletonOperation</span></span><br><span class="line">    <span class="comment">// &lt;/summary&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Log: <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用时机-Time-to-Use"><a href="#使用时机-Time-to-Use" class="headerlink" title="使用时机 Time to Use"></a>使用时机 Time to Use</h2><ul>
<li><p>When there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point</p>
</li>
<li><p>When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code</p>
</li>
</ul>
<h2 id="用例-User-Case"><a href="#用例-User-Case" class="headerlink" title="用例 User Case"></a>用例 User Case</h2><ul>
<li><p>管理数据库连接池 connection pool</p>
</li>
<li><p>缓存 cache</p>
</li>
<li><p>管理应用配置 manage application configuration</p>
</li>
<li><p>通用资源管理 general resource management</p>
</li>
</ul>
<h2 id="模式好坏-Pattern-Consequence"><a href="#模式好坏-Pattern-Consequence" class="headerlink" title="模式好坏 Pattern Consequence"></a>模式好坏 Pattern Consequence</h2><ul>
<li><p>违反了单一职责 Violates the SRP</p>
<ul>
<li><p>负责对象的创建 Control Creation</p>
</li>
<li><p>负责对象的生命周期管理 manage own lifecycle</p>
</li>
</ul>
</li>
<li><p>严格的控制客户对其的访问 Strict Control over how and when clients access it</p>
</li>
<li><p>Avoids polluting the namespace with global variables</p>
</li>
<li><p>Subclassing allows configuring the application with an instance of the class you need at runtime</p>
</li>
<li><p>Multipe instances can be allowed without having to alter the client</p>
</li>
<li><p>很多时候我们不用自己实现，让 IoC 容器管理吧</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Engineering</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道 - 有意义的命名</title>
    <url>/2025/06/29/Clean-Code-Naming/</url>
    <content><![CDATA[<h2 id="名副其实-Use-Intention-Revealing-Names"><a href="#名副其实-Use-Intention-Revealing-Names" class="headerlink" title="名副其实 Use Intention-Revealing Names"></a>名副其实 Use Intention-Revealing Names</h2><p>如下是较好的例子（既有计量对象，也有计量单位）：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> elapsedTimInDays;</span><br><span class="line"><span class="built_in">int</span> daysSinceCreation;</span><br><span class="line"><span class="built_in">int</span> daysSinceModification;</span><br><span class="line"><span class="built_in">int</span> fileAgeInDays;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="避免误导-Avoid-Disinformation"><a href="#避免误导-Avoid-Disinformation" class="headerlink" title="避免误导 Avoid Disinformation"></a>避免误导 Avoid Disinformation</h2><ul>
<li><p>不要滥用 List、Array，它们有特定的含义，当形容一群&#x2F;组东西时，要仔细思考是否要提及数据结构。</p>
</li>
<li><p>提防使用外形相似度高的名称，当两个命名长度很长且相似时，区分它们要花时间</p>
</li>
<li><p>在代码中，对同一概念或实体必须使用完全一致的命名和表达方式，才能传递清晰、无歧义的信息</p>
<ul>
<li><p>如混用 <code>start/begin</code>  <code>get/fetch</code>  <code>controller/manager</code> 等相似术语</p>
</li>
<li><p>统一使用 <code>start</code> 表示启动，<code>get</code> 表示获取</p>
</li>
</ul>
</li>
<li><p>不要用 <strong>小写字母 l</strong> 和 <strong>大写字母 O</strong> 作变量名</p>
</li>
</ul>
<h2 id="做有意义的区分-Make-Meaningful-Distinctions"><a href="#做有意义的区分-Make-Meaningful-Distinctions" class="headerlink" title="做有意义的区分 Make Meaningful Distinctions"></a>做有意义的区分 Make Meaningful Distinctions</h2><ul>
<li>不要用数字系列命名 Number-series naming (a1, a2, .. aN) is the opposite of intentional naming</li>
<li>不要说废话<ul>
<li>如类名叫 Product，又出现一个 ProductInfo 或 ProductData 的类，虽然它们名称不同，含义却无区别。类似的还有 Customer 和 CustomerObject</li>
<li>variable不要出现在变量名中，table不要出现在表名中</li>
</ul>
</li>
</ul>
<h2 id="使用能读出来的名称-Use-Pronounceable-Names"><a href="#使用能读出来的名称-Use-Pronounceable-Names" class="headerlink" title="使用能读出来的名称 Use Pronounceable Names"></a>使用能读出来的名称 Use Pronounceable Names</h2><ul>
<li><p>编程是一种社交活动，如果读不出来如何讨论？</p>
<ul>
<li>反例：变量名 genymdhms (generation date, year, month, day, hour, minute,<br>and second)，how to pronounce?</li>
</ul>
</li>
</ul>
<h2 id="使用可搜索的名称-Use-Searchable-Names"><a href="#使用可搜索的名称-Use-Searchable-Names" class="headerlink" title="使用可搜索的名称 Use Searchable Names"></a>使用可搜索的名称 Use Searchable Names</h2><p>对于单字母名称和数字常量，很难搜到，比如 搜索 数字7 很麻烦，但搜 MAX_CLASSES_PER_STUDENT 很容易。</p>
<ul>
<li>名称长度应与其作用域大小相对应</li>
</ul>
<h2 id="避免使用编码-Avoid-Encodings"><a href="#避免使用编码-Avoid-Encodings" class="headerlink" title="避免使用编码 Avoid Encodings"></a>避免使用编码 Avoid Encodings</h2><h3 id="匈牙利语标记法-Hungarian-Notation-HN"><a href="#匈牙利语标记法-Hungarian-Notation-HN" class="headerlink" title="匈牙利语标记法 Hungarian Notation, HN"></a>匈牙利语标记法 Hungarian Notation, HN</h3><p>这种命名法要求明确写出类型，类型置于实际名称前，如 bBuzy 代表类型为 boolean、名称为 Busy 的变量</p>
<p>现在这种编码形式纯属多余</p>
<h3 id="成员前缀-Member-Prefixes"><a href="#成员前缀-Member-Prefixes" class="headerlink" title="成员前缀 Member Prefixes"></a>成员前缀 Member Prefixes</h3><p>不必用 m_ 前缀标明成员变量</p>
<h3 id="接口与实现-Interfaces-and-Implementations"><a href="#接口与实现-Interfaces-and-Implementations" class="headerlink" title="接口与实现 Interfaces and Implementations"></a>接口与实现 Interfaces and Implementations</h3><ul>
<li><p>ShapeFactory n ShapeFactoryImp 推荐</p>
</li>
<li><p>IShapeFactory n ShapeFactory 不推荐，I 被滥用，但是还是看团队吧</p>
</li>
</ul>
<h2 id="避免思维映射-Avoid-Mental-Mapping"><a href="#避免思维映射-Avoid-Mental-Mapping" class="headerlink" title="避免思维映射 Avoid Mental Mapping"></a>避免思维映射 Avoid Mental Mapping</h2><p>经常出现在使用 问题领域术语(problem domain terms) 还是 解决方案领域术语 (solution domain terms)</p>
<p>明确是王道，编写的代码要易于理解</p>
<h2 id="类名-Class-Names"><a href="#类名-Class-Names" class="headerlink" title="类名 Class Names"></a>类名 Class Names</h2><ul>
<li><p>应该是 名词 或 名词短语，如 Customer、WikiPage、Account and AddressParser</p>
</li>
<li><p>反例：Manager、Processor、Data、Info</p>
</li>
<li><p>类名不应是动词</p>
</li>
</ul>
<h2 id="方法名-Method-Names"><a href="#方法名-Method-Names" class="headerlink" title="方法名 Method Names"></a>方法名 Method Names</h2><ul>
<li><p>应当是 动词 或 动词短语，如 postPayment、deletePage 或 save</p>
</li>
<li><p>使用描述了参数的静态工厂方法名重载构造器，把构造器设置为 private</p>
</li>
</ul>
<h2 id="别抖机灵-Do-not-Be-Cute"><a href="#别抖机灵-Do-not-Be-Cute" class="headerlink" title="别抖机灵 Do not Be Cute"></a>别抖机灵 Do not Be Cute</h2><ul>
<li><p>别用 HolyHandGrenade，使用 DeleteItems。明确含义</p>
</li>
<li><p>别用 whack() 表示 kill(), Say what you mean. Mean what you say</p>
</li>
</ul>
<h2 id="每个概念对应一个词-Pick-One-Word-per-Concept"><a href="#每个概念对应一个词-Pick-One-Word-per-Concept" class="headerlink" title="每个概念对应一个词 Pick One Word per Concept"></a>每个概念对应一个词 Pick One Word per Concept</h2><p>跟避免误导里某一项比较类似，就是说给 <strong>每个抽象概念</strong> 选 <strong>一个词</strong>，并一以贯之</p>
<p>例如，同时使用 fetch、retrieve 和 get 在多个类中的同种方法命名，会令人困惑</p>
<p>一以贯之的命名法是天降福音</p>
<h2 id="别用双关语-Do-not-Pun"><a href="#别用双关语-Do-not-Pun" class="headerlink" title="别用双关语 Do not Pun"></a>别用双关语 Do not Pun</h2><p>避免将同一单词用于不同目的，同一个术语用于多个不同概念，就是双关语</p>
<h2 id="使用解决方案领域名称-Use-Solution-Domain-Names"><a href="#使用解决方案领域名称-Use-Solution-Domain-Names" class="headerlink" title="使用解决方案领域名称 Use Solution Domain Names"></a>使用解决方案领域名称 Use Solution Domain Names</h2><p>优先使用 解决方案领域名称。你的读者是程序员，所以尽可能用计算机科学&#x2F;工程相关术语，多用技术性的名称，如：</p>
<ul>
<li><p>AccountVisitor 对于熟悉 访问者(Visitor)模式的程序员就很友好</p>
</li>
<li><p>JobQueue，我们知道这是个任务队列</p>
</li>
</ul>
<h2 id="使用问题领域名称-Use-problem-Domain-Names"><a href="#使用问题领域名称-Use-problem-Domain-Names" class="headerlink" title="使用问题领域名称 Use problem Domain Names"></a>使用问题领域名称 Use problem Domain Names</h2><p>如果不好用 解决方案领域名称，就从所涉问题领域寻找名称。至少这个名称你可以从领域专家那知道其含义</p>
<h2 id="添加有意义的语境-Add-Meaningful-Context"><a href="#添加有意义的语境-Add-Meaningful-Context" class="headerlink" title="添加有意义的语境 Add Meaningful Context"></a>添加有意义的语境 Add Meaningful Context</h2><h2 id="不要添加没用的语境-Do-not-Add-Gratuitous-Context"><a href="#不要添加没用的语境-Do-not-Add-Gratuitous-Context" class="headerlink" title="不要添加没用的语境 Do not Add Gratuitous Context"></a>不要添加没用的语境 Do not Add Gratuitous Context</h2><p>只要短名称足够清楚，就比长名称好，别给名称添加没用的语境</p>
<h2 id="总结-Conclusion"><a href="#总结-Conclusion" class="headerlink" title="总结 Conclusion"></a>总结 Conclusion</h2><p>明确 &amp; 简洁 &amp; 一以贯之 &amp; 优先解决方案领域</p>
]]></content>
      <categories>
        <category>Engineering</category>
      </categories>
      <tags>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 基础</title>
    <url>/2025/06/29/Hexo-Basic/</url>
    <content><![CDATA[<p>本篇记录一些 Hexo 常用的命令，备忘。</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="本地启动服务"><a href="#本地启动服务" class="headerlink" title="本地启动服务"></a>本地启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到远程"><a href="#部署到远程" class="headerlink" title="部署到远程"></a>部署到远程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="新建文章头模板"><a href="#新建文章头模板" class="headerlink" title="新建文章头模板"></a>新建文章头模板</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hexo 常用命令</span><br><span class="line">date: 2025-06-29 14:20:19</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> Tool</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br></pre></td></tr></table></figure>

<h3 id="See-more"><a href="#See-more" class="headerlink" title="See more"></a>See more</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
